AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: State machine For New Account Onboarding Processes.

Parameters:
  AccountLogGroupName:
    Type: String
    Default: "/SungardAS/Alerts/Account"
    Description: Account Cloudwatch Log Group Name
  SubscriptionFilterDestinationArn:
    Type: String
    Description: Subscription Filter Destination Arn
  DbUserName:
    Type: String
    Description: user name of mcaws db
  DbPassword:
    Type: String
    Description: password of mcaws db
  MasterMgmAwsId:
    Type: String
    Description: AWS Id of Master Management Account
  DataDogAwsId:
    Type: String
    Description: Aws Id of Datadog Aws Account
  BillingAccessKey:
    Type: String
    Description: Access key of Billing System
  BillingApiKey:
    Type: String
    Description: API key of Billing System
  BillingServer :
    Type: String
    Description: billingServer Url
  BillingFromAlertEmail:
    Type: String
    Description: From Email id 
  BillingToAlertEmail:
    Type: String
    Description: To Email id 
  KinesisStreamArn :
    Type: String
    Description: Kinesis stream arn
  CwlKinesisRoleArn :
    Type: String
    Description: Cwl to kinesis role arn
  CfnLambdaExecutionRole :
    Type: String
    Description: Cloudformation lambda execution role name
  CodePipelineServiceRole :
    Type: String
    Description: Codepipeline Service Role Name
  GitHubAccessToken:
    Type: String
    Description: Git hub access token

Resources:
  StateMachineLambdaFunctionIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: "arn:aws:logs:*:*:*"
                  -
                    Effect: "Allow"
                    Action:
                      - "ec2:*"
                      - "iam:*"
                      - "cloudformation:*"
                      - "logs:*"
                      - "ses:*"
                    Resource: "*"

  PreMasterFederationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Pre-Master-Federation
      Handler: index_pre_master_account_federation.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  SetMasterCredentialsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Set-Master-Credentials
      Handler: index_set_master_account_credentials.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  EnableBillingActivationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Enable-Billing-Activation
      Handler: index_enable_billing_activation.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  SetAccountLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Set-Account
      Handler: index_set_account.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  PreNewFederationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Pre-New-Federation
      Handler: index_pre_new_account_federation.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  SetNewCredentialsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Set-New-Credentials
      Handler: index_set_new_account_credentials.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  CreateAwsIamRolesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Create-Aws-Iam-Roles
      Handler: index_create_aws_iam_roles.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  FindRegionsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Find-Regions
      Handler: index_find_regions.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  NextRegionLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Next-Region
      Handler: index_next_region.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  SetResultsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Set-Results
      Handler: index_set_results.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  FinalResultLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Final-Result
      Handler: index_final_result.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 60
  HealthStackSetupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Setup-Health
      Handler: index_health_stack.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 300
  AddAccountToDestinationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Add-Account-To-Destination
      Handler: index_alerts_destination.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt StateMachineLambdaFunctionIAMRole.Arn
      Timeout: 300

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./swagger.yaml
      StageName: Prod
      Variables:
        LambdaFunctionName: !Ref ProxyLambdaFunction
  ProxyLambdaFunctionIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: "arn:aws:logs:*:*:*"
                  -
                    Effect: "Allow"
                    Action:
                      - "states:*"
                    Resource: "*"
  ProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-Proxy
      Handler: index.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt ProxyLambdaFunctionIAMRole.Arn
      Timeout: 60
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref OnBoardingStateMachine
          STATE_MACHINE_FOR_UNMANAGED_ACCOUNT_ARN: !Ref OnBoardingStateMachineForUnManaged
          DB_PASSWORD: !Ref DbPassword
          DB_USERNAME: !Ref DbUserName
          GIT_HUB_ACCESS_TOKEN: !Ref GitHubAccessToken
          CODE_PIPELINE_SERVICE_ROLE: !Ref CodePipelineServiceRole
          CFN_LAMBDA_EXEC_ROLE: !Ref CfnLambdaExecutionRole
          CWL_KINESIS_ROLE_ARN: !Ref CwlKinesisRoleArn
          KINESIS_STREAM_ARN: !Ref KinesisStreamArn
          
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  AlertLambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "logs:*"
                  - "cloudwatchlogs:*"
                Resource: "*"
  CloudWatchLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Onboarding-CloudwatchLogs
      Handler: index_cloudwatchlogs.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt AlertLambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          ACCOUNT_LOG_GROUP_NAME: !Ref AccountLogGroupName
          STATE_MACHINE_ARN: !Ref OnBoardingStateMachine
  AccountLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AccountLogGroupName
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: AccountLogGroup
    Properties:
      LogGroupName: !Ref AccountLogGroupName
      FilterPattern: ""
      DestinationArn: !Ref SubscriptionFilterDestinationArn

  StateMachineIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - !Join
                      - "."
                      - - states
                        - !Ref AWS::Region
                        - "amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "lambda:InvokeFunction"
                    Resource: "*"
  OnBoardingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: |-
        {
          "Comment": "OnBoarding Process for New Account",
          "StartAt": "PreMasterFederation",
          "States": {
            "PreMasterFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Pre-Master-Federation",
              "InputPath": "$",
              "Next": "MasterFederation"
            },
            "MasterFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Federation",
              "InputPath": "$.federation",
              "ResultPath": "$.credentials",
              "Next": "SetMasterCredentials"
            },
            "SetMasterCredentials": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-Master-Credentials",
              "InputPath": "$",
              "Next": "CreateAccount"
            },
            "CreateAccount": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Account",
              "InputPath": "$.account",
              "ResultPath": "$.account.result",
              "Next": "EnableBillingActivation"
            },
            "EnableBillingActivation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Enable-Billing-Activation",
              "InputPath": "$",
              "Next": "SetAccount"
            },
            "SetAccount": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-Account",
              "InputPath": "$",
              "Next": "AddAccountToAlertDestinations"
            },
            "AddAccountToAlertDestinations": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Add-Account-To-Destination",
              "InputPath": "$.alerts_destination",
              "ResultPath": "$.alerts_destination.result",
              "Next": "PreNewAccountFederation"
            },
            "PreNewAccountFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Pre-New-Federation",
              "InputPath": "$",
              "Next": "NewAccountFederation"
            },
            "NewAccountFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Federation",
              "InputPath": "$.federation",
              "ResultPath": "$.credentials",
              "Next": "SetNewAccountCredentials"
            },
            "SetNewAccountCredentials": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-New-Credentials",
              "InputPath": "$",
              "Next": "CreateAwsIamRoles"
            },
            "CreateAwsIamRoles": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Create-Aws-Iam-Roles",
              "InputPath": "$",
              "Next": "SetupHealthAlert"
            },
            "SetupHealthAlert": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Setup-Health",
              "InputPath": "$.health",
              "ResultPath": "$.health.result",
              "Next": "FindRegionsState"
            },
            "FindRegionsState": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Find-Regions",
              "InputPath": "$",
              "Next": "ChoiceState"
            },
            "ChoiceState": {
              "Type" : "Choice",
              "Choices": [
                {
                  "Variable": "$.num_of_regions",
                  "NumericGreaterThan": 0,
                  "Next": "NextRegionState"
                },
                {
                  "Variable": "$.num_of_regions",
                  "NumericEquals": 0,
                  "Next": "SetFinalResultState"
                }
              ],
              "Default": "SetFinalResultState"
            },
            "NextRegionState": {
              "Type" : "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Next-Region",
              "Next": "Parallel"
            },
            "Parallel": {
              "Type": "Parallel",
              "Next": "ConfigRulesActionState",
              "Branches": [
                {
                  "StartAt": "CloudtrailActionState",
                  "States": {
                    "CloudtrailActionState": {
                      "Type" : "Task",
                      "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-CloudTrail",
                      "InputPath": "$.cloudtrail",
                      "ResultPath": "$.cloudtrail.result",
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "AWSConfigActionState",
                  "States": {
                    "AWSConfigActionState": {
                      "Type" : "Task",
                      "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-AWSConfig",
                      "InputPath": "$.awsconfig",
                      "ResultPath": "$.awsconfig.result",
                      "End": true
                    }
                  }
                }
              ]
            },
            "ConfigRulesActionState": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-ConfigRules",
              "InputPath": "$[0].configrules",
              "ResultPath": "$[0].configrules.result",
              "Next": "SetResultsState"
            },
            "SetResultsState": {
              "Type" : "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-Results",
              "Next": "ChoiceState"
            },
            "SetFinalResultState": {
              "Type" : "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Final-Result",
              "Next": "SaveCloudwatchLog"
            },
            "SaveCloudwatchLog": {
              "Type" : "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-CloudwatchLogs",
              "Next": "FinalState"
            },
            "FinalState": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StateMachineIAMRole.Arn

  OnBoardingStateMachineForUnManaged:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: |-
        {
          "Comment": "OnBoarding Process for New Account",
          "StartAt": "PreMasterFederation",
          "States": {
            "PreMasterFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Pre-Master-Federation",
              "InputPath": "$",
              "Next": "MasterFederation"
            },
            "MasterFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Federation",
              "InputPath": "$.federation",
              "ResultPath": "$.credentials",
              "Next": "SetMasterCredentials"
            },
            "SetMasterCredentials": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-Master-Credentials",
              "InputPath": "$",
              "Next": "CreateAccount"
            },
            "CreateAccount": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Account",
              "InputPath": "$.account",
              "ResultPath": "$.account.result",
              "Next": "EnableBillingActivation"
            },
            "EnableBillingActivation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Enable-Billing-Activation",
              "InputPath": "$",
              "Next": "SetAccount"
            },
            "SetAccount": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-Account",
              "InputPath": "$",
              "Next": "PreNewAccountFederation"
            },
            "PreNewAccountFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Pre-New-Federation",
              "InputPath": "$",
              "Next": "NewAccountFederation"
            },
            "NewAccountFederation": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Federation",
              "InputPath": "$.federation",
              "ResultPath": "$.credentials",
              "Next": "SetNewAccountCredentials"
            },
            "SetNewAccountCredentials": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Set-New-Credentials",
              "InputPath": "$",
              "Next": "SetFinalResultState"
            },
            "SetFinalResultState": {
              "Type" : "Task",
              "Resource": "arn:aws:lambda:AWS::REGION:AWS::ACCOUNT_ID:function:SungardAS-Onboarding-Final-Result",
              "Next": "FinalState"
            },
            "FinalState": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StateMachineIAMRole.Arn

Outputs:
  APIURL:
    Description: "URL of your API endpoint"
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
